<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Order;
use Illuminate\Support\Facades\Auth;
use App\Models\{Batch, Category, Product, Room, Variant};
use Illuminate\Support\Facades\{DB, Storage};
use App\Models\User;




class AdminController extends Controller
{

    public function create()
    {
        $categories = Category::all();
        $rooms = Room::all();
        $allProducts = Product::with('variants')->get();

        return view('admin.form', compact('categories', 'rooms', 'allProducts'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'country' => 'required|string',
            'sticking' => 'required|string',
            'material' => 'required|string',
            'purchase_price' => 'required',
            'sale_price' => 'required|numeric',
            'brand' => 'required|string',
            'category_id' => 'required|exists:categories,id',
            'room_ids' => 'required|array',
            'room_ids.*' => 'exists:rooms,id',
            'description' => 'required|string',
            'detailed' => 'required|string',
            'companions' => 'nullable|array',
            'companions.*' => 'exists:products,id',
            'variants' => 'required|array|min:1',
            'variants.*.color' => 'required|string',
            'variants.*.sku' => 'required|string|distinct|unique:variants,sku',
            'variants.*.images' => 'required|array|min:1',
            'variants.*.images.*' => 'image|max:2048',
            'variants.*.batches' => 'required|array|min:1',
            'variants.*.batches.*.batch_code' => 'required|string',
            'variants.*.batches.*.stock' => 'required|integer|min:0',
        ]);

        DB::beginTransaction();

        try {
            $product = Product::create([
                'name' => $validated['name'],
                'country' => $validated['country'],
                'sticking' => $validated['sticking'],
                'material' => $validated['material'],
                'purchase_price' => $validated['purchase_price'],
                'sale_price' => $validated['sale_price'],
                'brand' => $validated['brand'],
                'category_id' => $validated['category_id'],
                'description' => $validated['description'],
                'detailed' => $validated['detailed'],
            ]);

            $product->rooms()->attach($validated['room_ids']);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏ —Å –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞–º–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            if (!empty($validated['companions'])) {
                // –°–≤—è–∑—å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞–º–∏
                $product->companions()->sync($validated['companions']);

                // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: —Å–≤—è–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–≤–∞—Ä–æ–º
                foreach ($validated['companions'] as $companionId) {
                    $companion = Product::find($companionId);
                    if ($companion) {
                        $companion->companions()->syncWithoutDetaching([$product->id]);
                    }
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–∞—Ä—Ç–∏–∏
            foreach ($validated['variants'] as $variantIndex => $variantData) {
                $imagePaths = [];
                if ($request->hasFile("variants.$variantIndex.images")) {
                    foreach ($request->file("variants.$variantIndex.images") as $image) {
                        $imagePaths[] = $image->store('variants', 'public');
                    }
                }

                $variant = $product->variants()->create([
                    'color' => $variantData['color'],
                    'sku' => $variantData['sku'],
                    'images' => json_encode($imagePaths),
                ]);

                foreach ($variantData['batches'] as $batch) {
                    $variant->batches()->create([
                        'batch_code' => $batch['batch_code'],
                        'stock' => $batch['stock'],
                    ]);
                }
            }

            DB::commit();
            return redirect()->route('admin.form')->with('success', '–¢–æ–≤–∞—Ä –∏ –ø–∞—Ä—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->withErrors(['error' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' . $e->getMessage()]);
        }
    }



    public function index(Request $request)
    {
        if (!Auth::check() || !Auth::user()->is_admin) {
            abort(403, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
        }

        $sku = $request->get('sku');

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ Variant
        $variants = Variant::with(['product.category', 'product.rooms', 'batches'])
            ->when($sku, fn($q) => $q->where('sku', 'like', "%$sku%"))
            ->paginate(1);

        $categories = Category::all();
        $rooms = Room::all();
        $allProducts = Product::with('variants')->get();

        if ($request->ajax()) {
            $html = view('admin.partials.variant-cards', compact('variants', 'categories', 'rooms', 'allProducts'))->render();
            return response()->json(['html' => $html]);
        }

        return view('admin.database', compact('variants', 'categories', 'rooms', 'allProducts'));
    }


    public function update(Request $request, $id)
    {
        $product = Product::findOrFail($id);

        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'country' => 'required|string',
            'sticking' => 'required|string',
            'material' => 'required|string',
            'purchase_price' => 'required',
            'sale_price' => 'required|numeric',
            'brand' => 'required|string',
            'category_id' => 'required|exists:categories,id',
            'room_ids' => 'required|array',
            'room_ids.*' => 'exists:rooms,id',
            'description' => 'required|string',
            'detailed' => 'required|string',

            // üëá –¥–æ–±–∞–≤–ª—è–µ–º companion_variant_ids
            'companion_variant_ids' => 'nullable|array',
            'companion_variant_ids.*' => 'exists:variants,id',
        ]);

        DB::beginTransaction();

        try {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            $product->update($validated);
            $product->rooms()->sync($validated['room_ids']);

            // üîÅ –ö–æ–º–ø–∞–Ω—å–æ–Ω—ã –ø–æ variant_id ‚Üí product_id
            if (!empty($validated['companion_variant_ids'])) {
                // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ variant_id
                $companionProductIds = Variant::whereIn('id', $validated['companion_variant_ids'])
                    ->pluck('product_id')
                    ->unique()
                    ->toArray();

                // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
                $companionProductIds = array_diff($companionProductIds, [$product->id]);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏
                $product->companions()->sync($companionProductIds);

                // –û–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏
                foreach ($companionProductIds as $companionId) {
                    $companion = Product::find($companionId);
                    if ($companion) {
                        $companion->companions()->syncWithoutDetaching([$product->id]);
                    }
                }

                // –£–¥–∞–ª–∏–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏
                $oldCompanions = Product::whereHas('companions', function ($q) use ($product) {
                    $q->where('companion_id', $product->id);
                })->get();

                foreach ($oldCompanions as $oldCompanion) {
                    if (!in_array($oldCompanion->id, $companionProductIds)) {
                        $oldCompanion->companions()->detach($product->id);
                    }
                }
            } else {
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ
                foreach ($product->companions as $companion) {
                    $companion->companions()->detach($product->id);
                }
                $product->companions()->detach();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            if ($request->hasFile('images')) {
                $imagePaths = [];
                foreach ($request->file('images') as $image) {
                    $imagePaths[] = $image->store('product_images', 'public');
                }
                $product->images = json_encode($imagePaths);
                $product->save();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–∞—Ä—Ç–∏–∏
            if ($request->has('variants')) {
                foreach ($request->input('variants') as $variantId => $variantData) {
                    $variant = $product->variants()->find($variantId);
                    if (!$variant) continue;

                    $variant->sku = $variantData['sku'] ?? $variant->sku;
                    $variant->color = $variantData['color'] ?? $variant->color;

                    if ($request->hasFile("variants.$variantId.images")) {
                        $paths = [];
                        foreach ($request->file("variants.$variantId.images") as $img) {
                            $paths[] = $img->store('variant_images', 'public');
                        }
                        $variant->images = json_encode($paths);
                    }

                    $variant->save();

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Ç–∏–∏
                    if (isset($variantData['batches'])) {
                        foreach ($variantData['batches'] as $batchId => $batchData) {
                            $batch = $variant->batches()->find($batchId);
                            if (!$batch) continue;

                            $batch->batch_code = $batchData['batch_code'] ?? $batch->batch_code;
                            $batch->stock = $batchData['stock'] ?? $batch->stock;
                            $batch->save();
                        }
                    }
                }
            }

            DB::commit();
            return redirect()->route('admin.database')->with('success', '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->withErrors(['error' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ' . $e->getMessage()]);
        }
    }


    public function delete($id)
    {
        $product = Product::findOrFail($id);

        if ($product->images) {
            $images = json_decode($product->images, true);
            foreach ($images as $imagePath) {
                Storage::disk('public')->delete($imagePath);
            }
        }

        $product->rooms()->detach();
        $product->companions()->detach();

        $product->delete();

        return redirect()->route('admin.database')->with('success', '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω');
    }

    public function deleteVariant($id)
    {
        $variant = Variant::findOrFail($id);

        // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if ($variant->images) {
            $images = json_decode($variant->images, true);
            foreach ($images as $imagePath) {
                Storage::disk('public')->delete($imagePath);
            }
        }

        // –£–¥–∞–ª—è–µ–º –ø–∞—Ä—Ç–∏–∏
        $variant->batches()->delete();

        // –£–¥–∞–ª—è–µ–º —Å–∞–º –≤–∞—Ä–∏–∞–Ω—Ç
        $variant->delete();

        return redirect()->back()->with('success', '–í–∞—Ä–∏–∞–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω');
    }


    public function adminIndex()
    {

        if (!Auth::check() || !Auth::user()->is_admin) {
            abort(403, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
        }

        $orders = Order::with(['items.variant.product'])->latest()->get();
        return view('admin.orders', compact('orders'));
    }

    public function updateStatus(Request $request, $id)
    {

        if (!Auth::check() || !Auth::user()->is_admin) {
            abort(403, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
        }

        $request->validate([
            'status' => 'required|string|in:–ù–æ–≤—ã–π,–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω,–ó–∞–≤–µ—Ä—à–µ–Ω,–û—Ç–º–µ–Ω–µ–Ω',
        ]);

        $order = Order::findOrFail($id);
        $order->status = $request->status;
        $order->save();

        return back()->with('success', '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.');
    }

    public function destroy($id)
    {

        if (!Auth::check() || !Auth::user()->is_admin) {
            abort(403, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
        }

        $order = Order::findOrFail($id);
        $order->delete();

        return back()->with('success', '–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω.');
    }

    public function clearAll()
    {


        if (!Auth::check() || !Auth::user()->is_admin) {
            abort(403, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
        }

        Order::truncate(); // –£–¥–∞–ª–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã (–∏ –∏—Ö items –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
        return redirect()->back()->with('success', '–í—Å–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã.');
    }




    public function users()
    {
        if (!auth()->user()?->is_admin) {
            abort(403, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
        }

        $users = User::all();
        return view('admin.users', compact('users'));
    }

    public function toggleAdmin(User $user)
    {
        if (!auth()->user()?->is_admin) {
            abort(403, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
        }

        // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if ($user->id === auth()->id()) {
            return redirect()->back()->withErrors(['error' => '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–µ–±—è.']);
        }

        $user->is_admin = !$user->is_admin;
        $user->save();

        return redirect()->back()->with('success', '–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
    }



    public function autocomplete(Request $request)
    {
        $term = $request->get('term');

        $skus = Variant::where('sku', 'LIKE', '%' . $term . '%')
            ->pluck('sku')
            ->take(10);

        return response()->json($skus);
    }



    public function editStock(Request $request)
    {
        $query = Variant::with(['product', 'batches']);

        if ($request->filled('sku')) {
            $query->where('sku', 'like', '%' . $request->sku . '%');
        }

        $variants = $query->paginate(1)->withQueryString(); // –ø–∞–≥–∏–Ω–∞—Ü–∏—è

        return view('admin.stock-edit', compact('variants'));
    }



    public function updateStockAjax(Request $request)
    {
        $stocks = $request->stocks;

        foreach ($stocks as $batchId => $stock) {
            \App\Models\Batch::where('id', $batchId)->update(['stock' => (int) $stock]);
        }

        return response()->json([
            'success' => true,
            'message' => '–û—Å—Ç–∞—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.'
        ]);
    }

    public function deleteBatch($id)
    {
        $batch = \App\Models\Batch::findOrFail($id);
        $batch->delete();

        return response()->json(['success' => true]);
    }
}
