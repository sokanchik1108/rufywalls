<?php

namespace App\Http\Controllers;

use App\Models\Order;
use App\Models\OrderItem;
use App\Models\Variant;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cookie;

class OrderController extends Controller
{
    public function checkout(Request $request)
    {
        $cart = json_decode(Cookie::get('cart', '{}'), true);

        if (empty($cart)) {
            return redirect()->route('cart')->with('error', '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
        }

        $variantIds = array_keys($cart);
        $variants = Variant::with('product')->whereIn('id', $variantIds)->get()->keyBy('id');

        $cartItems = collect($cart)->map(function ($item, $id) use ($variants) {
            $variant = $variants[$id];
            return [
                'variant' => $variant,
                'product' => $variant->product,
                'quantity' => $item['quantity'],
                'price' => $item['price'],
                'total' => $item['price'] * $item['quantity'],
                'image' => $item['image'] ?? (json_decode($variant->images)[0] ?? null),
            ];
        });


        $total = $cartItems->sum('total');

        return view('checkout', compact('cartItems', 'total'));
    }


    public function submit(Request $request)
{
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    $request->validate([
        'name' => [
            'required',
            'string',
            'max:255',
            'regex:/^[\p{L}\s\-]+$/u' // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
        ],
        'phone' => [
            'required',
            'string',
            'min:9', // –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤
            'max:30',
            'regex:/^\+?[0-9\s\-\(\)]+$/' // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, +, —Å–∫–æ–±–∫–∏, –ø—Ä–æ–±–µ–ª—ã, —Ç–∏—Ä–µ
        ],
        'comment' => ['nullable', 'string', 'max:500'],
    ], [
        'name.regex' => '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.',
        'phone.regex' => '–¢–µ–ª–µ—Ñ–æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, —Ç–∏—Ä–µ –∏ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +.',
        'phone.min' => '–¢–µ–ª–µ—Ñ–æ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£–∫–∞–∂–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤.',
    ]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    $cart = json_decode(Cookie::get('cart', '{}'), true);
    if (empty($cart)) {
        return redirect()->route('cart')->with('error', '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    $order = Order::create([
        'name' => $request->name,
        'phone' => $request->phone,
        'comment' => $request->comment,
        'status' => '–ù–æ–≤—ã–π',
    ]);

    foreach ($cart as $variantId => $item) {
        $variant = Variant::with('product')->find($variantId);
        if (!$variant) continue;

        OrderItem::create([
            'order_id' => $order->id,
            'variant_id' => $variantId,
            'quantity' => $item['quantity'] ?? 1,
            'price' => $item['price'] ?? 0,
            'image' => $item['image'] ?? (json_decode($variant->images)[0] ?? null),
        ]);
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    Cookie::queue(Cookie::forget('cart'));

    // WhatsApp-—Å—Å—ã–ª–∫–∞
    $whatsappLink = 'https://wa.me/77077121255?text=–Ø%20–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é%20–∑–∞–∫–∞–∑%20–Ω–∞%20—Å–∞–π—Ç–µ';
    $message = '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!<br>–ß—Ç–æ–±—ã –º—ã –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –≤ WhatsApp.<br>–≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.<br><br>';
    $message .= '<a href="' . $whatsappLink . '" class="btn btn-success btn-sm mt-2" target="_blank">üîó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –≤ WhatsApp</a>';

    return redirect()
        ->route('cart')
        ->with('success_html', $message);
}





    public function adminIndex()
    {
        $orders = Order::with(['items.variant.product'])->latest()->get();
        return view('admin.orders', compact('orders'));
    }

    public function updateStatus(Request $request, $id)
    {
        $request->validate([
            'status' => 'required|string|in:–ù–æ–≤—ã–π,–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω,–ó–∞–≤–µ—Ä—à–µ–Ω,–û—Ç–º–µ–Ω–µ–Ω',
        ]);

        $order = Order::findOrFail($id);
        $order->status = $request->status;
        $order->save();

        return back()->with('success', '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.');
    }

    public function destroy($id)
    {
        $order = Order::findOrFail($id);
        $order->delete();

        return back()->with('success', '–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω.');
    }

    public function clearAll()
    {
        Order::truncate(); // –£–¥–∞–ª–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã (–∏ –∏—Ö items –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
        return redirect()->back()->with('success', '–í—Å–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã.');
    }
}
